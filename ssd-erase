#!/bin/bash

# SSD数据擦除工具 v1.1
# GitHub: https://github.com/yourusername/ssd-erasure
# 
# 用法：
#   - 直接执行：curl -sSL https://yourdomain.xyz/ssd-erasure | sudo bash
#   - 预览脚本：curl -sSL https://yourdomain.xyz/ssd-erasure
#
# 警告：此脚本将执行SSD数据擦除，所有数据将被永久删除！

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# 检测是否通过管道执行
# if [ -t 0 ]; then
#   # 非管道执行（用户只是下载查看）
#   echo -e "${YELLOW}${BOLD}SSD数据擦除工具脚本${NC}"
#   echo -e "${RED}警告：此脚本将执行SSD数据擦除操作，所有数据将被永久删除！${NC}"
#   echo
#   echo -e "建议先审查脚本内容，确保安全后再执行。"
#   echo -e "执行方式: ${GREEN}curl -sSL https://yourdomain.xyz/ssd-erasure | sudo bash${NC}"
#   echo
#   echo -e "${YELLOW}--- 以下是脚本内容 ---${NC}"
#   # 使用/dev/stdin来获取通过管道传输的内容
#   if [ -f "$0" ]; then
#     cat "$0"
#   else
#     echo -e "${RED}无法显示脚本内容，请直接下载脚本文件查看。${NC}"
#   fi
#   exit 0
# fi

# Function to check if running as root


# Function to get system serial number
get_system_serial() {
    if command -v dmidecode &> /dev/null; then
        system_serial=$(dmidecode -s system-serial-number 2>/dev/null || echo "无法获取")
        echo -e "${BLUE}${BOLD}系统序列号:${NC} $system_serial"
    else
        echo -e "${YELLOW}警告: dmidecode命令不可用，无法获取系统序列号${NC}"
    fi
}

# Function to install required packages for NVMe
install_nvme_tools() {
    echo -e "\n${YELLOW}检查NVMe工具...${NC}"
    if ! command -v nvme &> /dev/null; then
        echo -e "${YELLOW}正在安装nvme-cli软件包...${NC}"
        if command -v pacman &> /dev/null; then
            pacman -Syy nvme-cli --noconfirm
        elif command -v apt &> /dev/null; then
            apt update && apt install -y nvme-cli
        elif command -v dnf &> /dev/null; then
            dnf install -y nvme-cli
        elif command -v yum &> /dev/null; then
            yum install -y nvme-cli
        else
            echo -e "${RED}${BOLD}错误: 找不到软件包管理器!${NC}"
            echo "请手动安装nvme-cli"
            exit 1
        fi
        # 验证安装是否成功
        if ! command -v nvme &> /dev/null; then
            echo -e "${RED}${BOLD}NVMe工具安装失败!${NC}"
            exit 1
        fi
        echo -e "${GREEN}NVMe工具安装成功${NC}"
    else
        echo -e "${GREEN}NVMe工具已安装${NC}"
    fi
}

# Function to get available disks excluding USB devices
get_available_disks() {
    echo -e "\n${BLUE}${BOLD}扫描可用存储设备...${NC}"
    
    # Get a list of all block devices excluding partitions and USB devices
    mapfile -t all_disks < <(lsblk -d -o NAME,SIZE,MODEL,SERIAL,TRAN,TYPE 2>/dev/null | grep -i "disk" | grep -v -i "usb")
    
    # Check if we have any disks
    if [ ${#all_disks[@]} -eq 0 ]; then
        echo -e "${RED}${BOLD}未找到内部存储设备!${NC}"
        exit 1
    fi
    
    # Print header
    echo -e "${YELLOW}可用磁盘 (已排除USB设备):${NC}"
    
    # Print list header
    echo -e "${BOLD}索引 | 设备 | 容量 | 型号 | 序列号 | 类型${NC}"
    echo "------------------------------------------------------"
    
    # Print each disk with index
    for i in "${!all_disks[@]}"; do
        echo -e "$i | ${all_disks[$i]}"
    done
}

# Function to select disk
select_disk() {
    get_available_disks
    
    # Get number of disks
    disk_count=${#all_disks[@]}
    
    echo -e "\n${YELLOW}请选择要擦除的磁盘 (0-$((disk_count-1))):${NC}"
    selected_index=""
    
    # Keep asking until we get a valid selection
    while [[ ! $selected_index =~ ^[0-9]+$ ]] || [ "$selected_index" -ge "$disk_count" ]; do
        echo -n "输入磁盘索引 (或 'q' 退出): "
        read -r selected_index
        
        if [[ "$selected_index" == "q" ]]; then
            echo -e "${YELLOW}操作已取消${NC}"
            exit 0
        fi
    done
    
    # Extract device name from the selected disk
    selected_disk=$(echo "${all_disks[$selected_index]}" | awk '{print $1}')
    disk_info=$(echo "${all_disks[$selected_index]}")
    
    # 验证设备是否存在
    if [ ! -b "/dev/$selected_disk" ]; then
        echo -e "${RED}${BOLD}错误: 设备 /dev/$selected_disk 不存在!${NC}"
        exit 1
    fi
    
    echo -e "\n${GREEN}已选择磁盘: /dev/$selected_disk${NC}"
    echo -e "磁盘信息: $disk_info"
    
    # Determine disk type (NVMe or SATA)
    if [[ "$selected_disk" == nvme* ]]; then
        disk_type="nvme"
    else
        disk_type="sata"
    fi
    
    # Additional confirmation for safety
    echo -e "\n${RED}${BOLD}警告: /dev/$selected_disk 上的所有数据将被永久擦除!${NC}"
    echo -n "你确定要继续吗? (输入 'yes' 继续): "
    read -r confirmation
    
    if [[ "$confirmation" != "yes" ]]; then
        echo -e "${YELLOW}操作已取消${NC}"
        exit 0
    fi
    
    return 0
}

# Function to erase SATA SSD
erase_sata_ssd() {
    local disk=$1
    echo -e "\n${BLUE}${BOLD}正在执行SATA SSD安全擦除 /dev/$disk${NC}"
    
    # 检查hdparm是否可用
    if ! command -v hdparm &> /dev/null; then
        echo -e "${RED}${BOLD}错误: hdparm命令不可用${NC}"
        echo "请安装hdparm工具后再试"
        exit 1
    fi
    
    # 检查设备是否支持安全擦除
    if ! hdparm -I /dev/$disk | grep -q "supported: enhanced erase"; then
        echo -e "${RED}${BOLD}错误: 该设备不支持安全擦除!${NC}"
        exit 1
    fi
    
    # Set temporary password for secure erase
    echo -e "\n${YELLOW}设置临时安全密码...${NC}"
    hdparm --user-master u --security-set-pass "password" /dev/$disk
    
    # Check if password was set successfully
    if [ $? -ne 0 ]; then
        echo -e "${RED}${BOLD}设置安全密码时出错。中止操作。${NC}"
        exit 1
    fi
    
    # Try normal secure erase first
    echo -e "\n${YELLOW}执行安全擦除...${NC}"
    hdparm --user-master u --security-erase "password" /dev/$disk
    
    # If normal secure erase failed, try enhanced secure erase
    if [ $? -ne 0 ]; then
        echo -e "\n${YELLOW}标准安全擦除失败。尝试增强型安全擦除...${NC}"
        hdparm --user-master u --security-erase-enhanced "password" /dev/$disk
        
        if [ $? -ne 0 ]; then
            echo -e "${RED}${BOLD}增强型安全擦除也失败了。请检查驱动器是否支持安全擦除。${NC}"
            exit 1
        fi
    fi
    
    echo -e "\n${GREEN}${BOLD}SATA SSD安全擦除成功完成!${NC}"
}

# Function to erase NVMe SSD
erase_nvme_ssd() {
    local disk=$1
    echo -e "\n${BLUE}${BOLD}正在执行NVMe SSD安全擦除 /dev/$disk${NC}"
    
    # Install NVMe tools if needed
    install_nvme_tools
    
    # Perform NVMe format
    echo -e "\n${YELLOW}执行NVMe格式化命令...${NC}"
    nvme format --force -s1 /dev/$disk
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}${BOLD}NVMe格式化失败。请检查驱动器是否支持格式化命令。${NC}"
        exit 1
    fi
    
    echo -e "\n${GREEN}${BOLD}NVMe SSD安全擦除成功完成!${NC}"
}

# Function to log results
log_results() {
    local disk=$1
    local disk_type=$2
    
    # Create a timestamp
    timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
    
    # Create log directory if it doesn't exist
    log_dir="/var/log/ssd_erase_logs"
    mkdir -p "$log_dir"
    
    # Prepare log file
    log_file="${log_dir}/erase_${disk}_${timestamp}.log"
    
    # Log system information
    echo "SSD擦除日志 - $timestamp" > "$log_file"
    echo "==============================================" >> "$log_file"
    if command -v dmidecode &> /dev/null; then
        echo "系统序列号: $(dmidecode -s system-serial-number 2>/dev/null || echo "无法获取")" >> "$log_file"
    fi
    echo "设备: /dev/$disk" >> "$log_file"
    echo "磁盘类型: $disk_type" >> "$log_file"
    echo "磁盘信息: $(lsblk -o NAME,SIZE,MODEL,SERIAL,TRAN /dev/$disk 2>/dev/null | grep -v NAME)" >> "$log_file"
    echo "擦除方法: $([ "$disk_type" == "nvme" ] && echo "NVMe Format" || echo "ATA Secure Erase")" >> "$log_file"
    echo "擦除状态: 已完成" >> "$log_file"
    echo "擦除时间: $timestamp" >> "$log_file"
    echo "==============================================" >> "$log_file"
    
    echo -e "\n${GREEN}擦除日志已保存至: $log_file${NC}"
    echo -e "${YELLOW}请拍摄此屏幕的照片以存档${NC}"
}

# Main function
main() {
    clear
    echo -e "${BLUE}${BOLD}==========================================${NC}"
    echo -e "${BLUE}${BOLD}        SSD数据擦除工具 v1.1              ${NC}"
    echo -e "${BLUE}${BOLD}==========================================${NC}"
    echo -e "${YELLOW}此工具将对选定的SSD执行安全擦除${NC}"
    echo -e "${RED}${BOLD}警告: 所有数据将被永久删除${NC}\n"
    
    # Check if running as root
    check_root
    
    # Get system serial number
    get_system_serial
    
    # Select disk to erase
    select_disk
    
    # Perform the appropriate erasure based on disk type
    if [[ "$disk_type" == "nvme" ]]; then
        erase_nvme_ssd "$selected_disk"
    else
        erase_sata_ssd "$selected_disk"
    fi
    
    # Log results
    log_results "$selected_disk" "$disk_type"
    
    echo -e "\n${GREEN}${BOLD}数据擦除成功完成!${NC}"
    echo -e "${YELLOW}请记得拍摄此屏幕的照片以备存档${NC}"
    echo -e "${BLUE}${BOLD}==========================================${NC}"
}

# Run main function
main
